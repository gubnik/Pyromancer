buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'org.spongepowered.mixin'

repositories {
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    maven { url = 'https://maven.kosmx.dev/'}
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.11'
    implementation fg.deobf('com.github.glitchfiend:TerraBlender-forge:1.19.2-2.0.1.162')
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:1.0.2")
}

version = '2.0.0'
group = 'net.team_prometheus.pyromancer'
archivesBaseName = 'pyromancer'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.19.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=pyromancer.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                pyromancer {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=pyromancer.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                pyromancer {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            arg "-mixin.config=pyromancer.mixins.json"
            mods {
                pyromancer {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=pyromancer.mixins.json"
            args '--mod', 'pyromancer', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                pyromancer {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    ext.refMap = "main.refmap.json"
}

jar {
    manifest {
        attributes(
                [
                //"MixinConfig": "pyromancer.mixins.json",
                //"tweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "Specification-Title"     : "pyromancer",
                "Specification-Vendor"    : "pyromancersareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "pyromancersareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

mixin {
    add sourceSets.main, "pyromancer.refmap.json"
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
